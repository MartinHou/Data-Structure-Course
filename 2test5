#include <iostream>
#include <stdlib.h>

using namespace std;

typedef int Status;
typedef int ElemType;

typedef struct LNode
{
    ElemType data;
    struct LNode* next;    
}LinkNode,*LinkList;

void LinkInit(LinkList &L){
    L=(LinkNode*)malloc(sizeof(LinkNode));
    L->next=NULL;
}
void LinkCreate(LinkList &L,int n){
    LinkNode* p=L;
    for(int i=0;i<n;++i){
        p->next=(LinkList)malloc(sizeof(LinkNode));
        p=p->next;
        cin>>p->data;
    }
    p->next=NULL;
}
Status LinkInsert(LinkList &L,int i,ElemType elem){
	int j=0;
	LinkNode *node=(LinkList)malloc(sizeof(LinkNode));
	node->data=elem;
	LinkNode* p=L;
	while(p!=NULL&&j!=i-1){
		p=p->next;
		j++;
	}
	if(p==NULL)return 0;
	node->next=p->next;
	p->next=node;
	return 1;	
}
Status Linkdel(LinkList &L,int n){
    LinkNode* p=L,* q;
    int i=0;
    while(p!=NULL&&i!=n-1){
        ++i;
        p=p->next;
    }
    if(p==NULL)return 0;
    q=p->next;
    if(q==NULL)return 0;
    p->next=q->next;
    free(q);
    return 1;
}
void DestroyLink(LinkList &L){
	LinkNode* p=L,* q;
	while(p!=NULL){
		q=p->next;
		free(p);
		p=q;
	}
}
void LinkShow(LinkList L){
    LinkNode* p=L->next;
    while(p!=NULL){
        cout<<p->data<<" ";
        p=p->next;
    }
}
Status GetElem(LinkList L,int i,ElemType &e){
	LinkNode* p=L;
	int j=0;
	while(p!=NULL&&j!=i){
		p=p->next;
		j++;
	}
	if(p==NULL)return 0;
	e=p->data;
	return 1;
}

int main(){
    int num;
    cin>>num;
    LinkList L;
    ElemType elem;
    LinkInit(L);
    LinkCreate(L,num);
    for(int i=1;i<=num;++i){
        GetElem(L,i,elem);
        if(elem<0){
            Linkdel(L,i);
            LinkInsert(L,1,elem);
        }
    }
    LinkShow(L);
    DestroyLink(L);
    return 0;
}
